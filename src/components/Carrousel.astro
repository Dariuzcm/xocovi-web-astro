---
import CaretRightIcon from "./Icons/CaretRightIcon.astro";

export interface Props<T> {
  items: T[];
  Component: any;
}

const { items, Component } = Astro.props;
---

<div id="carrousel-container relative h-[90%] w-full overflow-hidden">
  {
    items.map((item: astroHTML.JSX.IntrinsicAttributes, index: any) => (
      <div data-index={index} class={"hidden carrousel-out"}>
        <Component {...item} />
      </div>
    ))
  }
</div>
<div class="flex gap-6 items-center justify-center content-center">
  <button
    id="previous"
    class:list={[
      "font-bold",
      "text-5xl",
      "rounded-full",
      "rotate-180",
      "bg-white",
      "hover:bg-saffron",
      "hover:text-white",
      "active:bg-saffron-700",
    ]}
  >
    <CaretRightIcon />
  </button>
  <div class="w-fit flex gap-6 p-3">
    {
      items.map((_item: any, index: number) => (
        <button
          class="border-[2px] border-solid shadow-md shadow-white-200"
          class:list={[
            "slider",
            "rounded-full",
            "size-4",
            "bg-white-400",
            "active:bg-saffron-800",
            "border-white-300",
          ]}
          onclick={`selectItem(${index})`}
          data-button-index={index}
        />
      ))
    }
  </div>
  <button
    id="next"
    class="font-bold text-5xl rounded-full bg-white hover:bg-saffron hover:text-white active:bg-saffron-700"
    ><CaretRightIcon /></button
  >
</div>

<script>
  ///---------- vars
  const carrouselContainer = document.getElementById("carrousel-container");
  const previousButton = document.getElementById("previous");
  const nextButton = document.getElementById("next");
  const sliderButtons = document.getElementsByClassName("slider");

  let currentIndex = 0;
  let pause = false;
  const interval = 800;
  let intervalId: number;

  /// --------------Listeners

  carrouselContainer?.addEventListener("mouseover", () => (pause = true));
  carrouselContainer?.addEventListener("mouseleave", () => (pause = false));
  previousButton?.addEventListener("click", () => prev());
  nextButton?.addEventListener("click", () => next());

  for (let index = 0; index < sliderButtons.length; index++) {
    sliderButtons[index].addEventListener("click", () => selectItem(index));
  }

  /// functions ----------------
  function ActivateOut() {
    const carrousel = document.querySelector("div.carrousel");
    if (carrousel) {
      carrousel.classList.remove("carrousel");
      carrousel.classList.add("carrousel-out");
      setTimeout(() => {
        carrousel.classList.add("hidden");
      }, interval);
    }
  }

  function Activate(index: number) {
    const carrousel = document.querySelector(`div[data-index="${index}"]`);
    const otherButtons = document.getElementsByClassName("active-button");
    const button = document.querySelector(
      `button[data-button-index="${index}"]`
    );

    if (button && otherButtons) {
      for (let other of otherButtons) {
        other.classList.remove("bg-saffron");
        other.classList.remove("active-button");
        other.classList.add("bg-white-400");
      }
      button.classList.remove("bg-white-400");
      button.classList.add("bg-saffron");
      button.classList.add("active-button");
    }
    if (carrousel) {
      carrousel.classList.remove("carrousel-out");
      carrousel.classList.remove("hidden");
      carrousel.classList.add("carrousel");
    }
  }

  function incrementIndex() {
    currentIndex++;
    if (currentIndex > 5) currentIndex = 0;
    return currentIndex;
  }

  function decrementIndex() {
    currentIndex--;
    if (currentIndex < 0) currentIndex = 5;
    return currentIndex;
  }

  function next() {
    SetInterval(intervalId);
    ActivateOut();
    incrementIndex();
    setTimeout(() => {
      Activate(currentIndex);
    }, interval);
  }

  function prev() {
    SetInterval(intervalId);
    ActivateOut();
    decrementIndex();
    setTimeout(() => {
      Activate(currentIndex);
    }, interval);
  }

  function selectItem(index: number) {
    SetInterval(intervalId);
    ActivateOut();
    currentIndex = index;
    setTimeout(() => {
      Activate(currentIndex);
    }, interval);
  }

  Activate(currentIndex);
  SetInterval();
  function SetInterval(inter?: number) {
    clearInterval(inter);
    intervalId = setInterval(() => {
      if (!pause) {
        next();
      }
    }, 10000);
  }
</script>

<style>
  button {
    transition: all 300ms ease-in-out;
  }
  .carrousel {
    transition:
      opacity 0.3ms ease-in-out,
      margin 1s ease-in;
    animation-name: carrouselAnimationIn;
    animation-duration: 500ms;
  }
  .carrousel-container {
    transition: margin 1s ease-in-out;
    overflow-y: hidden;
    width: 100%;
    height: auto;
  }
  .carrousel-out {
    transition:
      opacity-margin 0.3ms ease-in-out,
      margin 1s ease-in;
    animation-name: carrouselAnimationOut;
    animation-duration: 500ms;
    opacity: 0;
  }
  @keyframes carrouselAnimationIn {
    from {
      opacity: 0;
      margin-left: 200px;
    }
    to {
      opacity: 1;
      margin-left: inherit;
    }
  }

  @keyframes carrouselAnimationOut {
    from {
      margin-right: inherit;
      opacity: 1;
    }
    to {
      opacity: 0;
      margin-right: 200px;
    }
  }
</style>
